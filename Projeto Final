#include <stdlib.h>
#include <stdio.h>
#include <locale.h>
#include <conio.h>
#include <string.h>
#include <Windows.h>
#include <math.h>

//Criando as structs de clientes, produtos e ordens de compra e venda.
//cliente
typedef struct{
	char id_cliente[3];
	char nomecliente[50];
	char cpf[11];
	char email[50];
}cliente;
//produto
typedef struct{
	char id_produto[3];
	char nomeproduto[50];
	char valor[11];
	char estoque[5];
}produto;
//compra
typedef struct{
	char id_compra[3];
	char nomeproduto[50];
	char qnt[5];
	char valor_total[11];
}compra;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Funçoes para transformar float/double para string
void reverse(char* str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
 
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }
 

    while (i < d)
        str[i++] = '0';
 
    reverse(str, i);
    str[i] = '\0';
    return i;
}
 
void ftoa(float n, char* res, int afterpoint)
{
    // Extract integer part
    int ipart = (int)n;
 
    // Extract floating part
    float fpart = n - (float)ipart;
 
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 
    // check for display option after point
    if (afterpoint != 0) {
        res[i] = ','; // add dot
 
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

char confirmacao(){
	char c;
	
	do {
		
 		printf("\nConfirma o cadastro? (s ou n)" );
 		c= getch();
 		
 	}while (c != 's' && c != 'n');
 	
 	return c;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Cadastro Cliente

void CadastroCliente(){
	FILE *Arquivo;
	
	cliente n;
	int parametro;
	
	char Local_arq[] = {"Clientes.txt"};
	
	Arquivo = fopen(Local_arq,"a+b");
	
		if(Arquivo == NULL){
			printf("Erro abertura do Arquivo : %s. Tecle algo !\n",Local_arq);
			getch();
		}
		else{
			printf("Digite o id do cliente a ser cadastrado : ");
				gets(n.id_cliente);
			fflush(stdin);
			
			printf("\nDigite o nome do cliente: ");
				gets(n.nomecliente);
			fflush(stdin);
				
			printf("\nDigite o cpf do cliente: ");
				gets(n.cpf);
			fflush(stdin);
				
			printf("\nDigite o e-mail do cliente: ");
				gets(n.email);
			fflush(stdin);
				
			char c = confirmacao();
				
				if(c == 's'){
					parametro = fwrite(&n, sizeof(n),1,Arquivo);
					if(parametro == 1){
						system("CLS");
						printf("Cadastro efetuado com sucesso!");
						Sleep(2000);
					}
					else{
						system("CLS");
						printf("Não foi possível efetuar o cadastro, favor informar o gerente.");
						getch();
						Sleep(2000);
					}
				}
			
		}
	fclose(Arquivo);
}
//Cadastro Produto

void CadastroProduto(){
	FILE *Arquivo;
	
	produto n;
	int parametro;
	
	char Local_arq[] = {"Produtos.txt"};
	
	Arquivo = fopen(Local_arq,"a+b");
	
		if(Arquivo == NULL){
			printf("Erro abertura do Arquivo : %s. Tecle algo !\n",Local_arq);
			getch();
		}
		else{
			printf("Digite o id do produto a ser cadastrado : ");
				gets(n.id_produto);
			fflush(stdin);
			
			printf("\nDigite o nome do produto: ");
				gets(n.nomeproduto);
			fflush(stdin);
				
			printf("\nDigite o valor do produto: ");
				gets(n.valor);
			fflush(stdin);
				
			printf("\nDigite a quantidade do produto em estoque: ");
				gets(n.estoque);
			fflush(stdin);
				
			char c = confirmacao();
				
				if(c == 's'){
					parametro = fwrite(&n, sizeof(n),1,Arquivo);
					if(parametro == 1){
						system("CLS");
						printf("Cadastro efetuado com sucesso!");
						Sleep(2000);
					}
					else{
						system("CLS");
						printf("Não foi possível efetuar o cadastro, favor informar o gerente.");
						getch();
						Sleep(2000);
					}
				}
			
		}
	fclose(Arquivo);
}
//Cadastro Compra

int CadastroCompra(){
	FILE *Arquivo;
	FILE *Arquivo1;
	
	compra n;
	produto m;
	int parametro, parametro1, x, confirma_cod = 0;
	
	char Local_arq[] = {"Compra_e_Venda.txt"}, Produto_arq[] = {"Produtos.txt"}, codigo[3];
	
	Arquivo = fopen(Local_arq,"a+b");
	Arquivo1 = fopen(Produto_arq,"r+");
	
		if(Arquivo == NULL){
			printf("Erro abertura do Arquivo : %s. Tecle algo !\n",Local_arq);
			getch();
		}
		if(Arquivo1 == NULL){
			printf("Erro abertura do Arquivo : %s. Tecle algo !\n",Produto_arq);
			getch();
		}
		else{
			
			printf("Digite o codigo da compra : ");
				gets(n.id_compra);
			fflush(stdin);
			
			printf("\nDigite quantos produtos deseja comprar: ");
				scanf("%d",&x);
			fflush(stdin);
			
			for(int i = 0; i < x; i++){
			confirma_cod = 0;
			rewind(Arquivo1);
				
			printf("\nDigite o codigo do produto : ");
				gets(codigo);
			fflush(stdin);
			
			while(fread(&m,sizeof(m),1,Arquivo1)){

				if(strcmp(codigo,m.id_produto) == 0){
				confirma_cod = 1;
				
				printf("\nDigite a quantidade desejada deste produto: ");
					gets(n.qnt);
				fflush(stdin);
				
				double qnt_estoque = atof(m.estoque);
				double qnt_desejada = atof(n.qnt);
				
				qnt_estoque = qnt_estoque - qnt_desejada;
				
					if(qnt_estoque >= 0){
						
						strcat(n.nomeproduto, m.nomeproduto);
						
						ftoa(qnt_estoque, m.estoque, 0);
						
						double preco = atof(m.valor);
						preco = preco * qnt_desejada;
						
						double preco_cheio = 0;
						preco_cheio = preco_cheio + preco;
						
						ftoa(preco_cheio, n.valor_total, 2);
						
					}
					else{
						printf("\n\nQuantidade não disponivel em estoque!\n\nVoltando ao menu");
						for(int y = 1; y <= 3; y++){
						Sleep(500);
						printf(".");
						}
						return 0;
					}
					}
				
		}
		if(!confirma_cod){
					
					printf("\nProduto inexistente!\n\nVoltando ao menu");
					for(int z = 1; z <= 3; z++){
						Sleep(750);
						printf(".");
					}
					return 0;
							
				}
	}
				char c = confirmacao();
				
				if(c == 's'){
					parametro1 = fwrite(&m, sizeof(m),1,Arquivo1);
					parametro = fwrite(&n, sizeof(n),1,Arquivo);
					if(parametro == 1 && parametro1 == 1){
						system("CLS");
						printf("Cadastro de compra efetuado com sucesso!");
						Sleep(2000);
					}
					else{
						system("CLS");
						printf("Não foi possível efetuar o cadastro, favor informar o gerente.");
						getch();
						Sleep(2000);
					}
				}
		}
		
	fclose(Arquivo);
	fclose(Arquivo1);
	
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Consulta Cliente
int ConsultaCliente(){
	FILE *Arquivo;
	
	cliente n;
	int parametro, confirma_cod, y = 1;
	char codigo[3], c;
	
	char Local_arq[] = {"Clientes.txt"};
	
	Arquivo = fopen(Local_arq,"rb");
	
		if(Arquivo == NULL){
			printf("Erro abertura do Arquivo : %s. Tecle algo !\n",Local_arq);
		}
		else{
			for(int x = 0; x < y; x++){
				rewind(Arquivo);
				printf("Digite o codigo do cliente que deseja consultar: ");
					gets(codigo);
				fflush(stdin);
				
				system("CLS");
				
				confirma_cod = 0;
				while(fread(&n,sizeof(n),1,Arquivo)){
					if(strcmp(codigo,n.id_cliente)==0){
						confirma_cod = 1;
						printf("-DADOS DO CLIENTE-\n\nId: %s\nNome: %s\nCpf: %s\nE-mail: %s\n\n", n.id_cliente, n.nomecliente, n.cpf, n.email);
						system("PAUSE");
						system("CLS");
						printf("Deseja realizar outra consulta? (s ou n)");
						fflush(stdin);
						c = getch();
						
						if(c == 's'){
							system("CLS");
							y++;
						}else{
							system("CLS");
							return 0;
						}
					}
				}
					if(!confirma_cod){
						printf("Não há clientes cadastrados com este código!\nVoltando ao menu");
							for(int z = 1; z <= 3; z++){
								Sleep(750);
								printf(".");
						}
						return 0;
					}
				
			}
		}
	fclose(Arquivo);
}
//Consulta Produto



//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Menu
int menu(){
	int escolha, i;
	
	printf("Selecione a opção desejada:\n\n1-Criar Cliente\n2-Consultar Cliente\n3-Atualizar Cliente\n4-Excluir Cliente\n5-Criar Produto\n6-Consultar Produto\n7-Atualizar Produto\n8-Excluir Produto\n9-Criar Ordem de Compra\n10-Consultar Ordem de Compra\n11-Atualizar Ordem de Compra\n12-Excluir Ordem de Compra\n0-Sair\n\n");
	scanf("%d",&escolha);
	if(escolha < 0 || escolha > 12){
		system("CLS");
		system("COLOR 4");
		printf("Opção Inválida\nFechando o sistema");
		
		for(i = 1; i <= 3; i++){
			Sleep(500);
			printf(".");
		}
		
		exit(0);
	}
	return escolha;
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MAIN
int main(){

	setlocale(LC_ALL,"Portuguese");
	system("color b");
	
	printf("Bem Vindo a DUNE PLACAS LTDA\n\n");
	
	int processo;
	
	do{
	processo = menu();
	
	
		switch(processo){
			
			case 1://criar cliente
			system("CLS");
				fflush(stdin);
				CadastroCliente();
			system("CLS");
			break;
			case 2://consultar cliente
			system("CLS");
				fflush(stdin);
				ConsultaCliente();
			system("CLS");
			break;
			case 3://atualizar cliente
			
			break;
			case 4://excluir cliente
			
			break;
			case 5://criar produto
			system("CLS");
				fflush(stdin);
				CadastroProduto();
			system("CLS");
			break;
			case 6://consultar produto
			
			break;
			case 7://atualizar produto
			
			break;
			case 8://excluir produto
			
			break;
			case 9://criar ordem de compra/venda
			system("CLS");
				fflush(stdin);
				CadastroCompra();
			system("CLS");
			break;
			case 10://consultar ordem de compra/venda
			
			break;
			case 11://atualizar ordem de compra/venda
			
			break;
			case 12://excluir ordem de compra/venda
			
			break;
			default:
				system("CLS");
				printf("Encerrando programa");
				for(int i = 1; i <= 3; i++){
					Sleep(500);
					printf(".");
				}
				printf("=)");
				printf("\n\n");
			break;
		
		}
	}while(processo != 0);
	
	return 0;
}
